From c73081ae28d5ce27d770f350af08d33186f6e019 Mon Sep 17 00:00:00 2001
From: Thomas Hudspith-Tatham <iammotivated@gmail.com>
Date: Mon, 30 Oct 2017 21:30:03 +0000
Subject: [PATCH] remove example code

---
 src/app/components/@FlashMessages/FlashMessages.js |  31 --------
 .../@FlashMessages/FlashMessages.spec.js           |  44 -----------
 src/app/components/@FlashMessages/Msg.js           |  40 ----------
 src/app/components/@FlashMessages/Msg.scss         |  31 --------
 src/app/components/@FlashMessages/Msg.spec.js      |  82 ---------------------
 src/app/components/App/App.js                      |  34 ++-------
 src/app/components/App/App.module.scss             |  13 ----
 src/app/components/App/App.spec.js                 |  57 ++------------
 src/app/components/App/App.spec.js.snap            |  12 +--
 .../components/HeadNavigation/HeadNavigation.js    |  24 ------
 .../HeadNavigation/HeadNavigation.module.scss      |  16 ----
 .../HeadNavigation/HeadNavigation.spec.js          |  55 --------------
 src/app/composition/root-reducer.js                |   4 -
 src/app/copy.js                                    |   4 -
 src/app/modules/bar/bar.actions.js                 |   9 ---
 src/app/modules/bar/bar.actions.spec.js            |  31 --------
 src/app/modules/bar/bar.constants.js               |   2 -
 src/app/modules/bar/bar.reducers.js                |  28 -------
 src/app/modules/bar/bar.reducers.spec.js           |  72 ------------------
 src/app/modules/bar/bar.selectors.js               |   3 -
 src/app/modules/flash/flash.actions.js             |  18 -----
 src/app/modules/flash/flash.actions.spec.js        |  56 --------------
 src/app/modules/flash/flash.constants.js           |   3 -
 src/app/modules/flash/flash.reducers.js            |  23 ------
 src/app/modules/flash/flash.reducers.spec.js       |  80 --------------------
 src/app/modules/flash/flash.selectors.js           |   7 --
 src/app/modules/flash/flash.selectors.spec.js      |  52 -------------
 src/app/routes/BarRoute/BarRoute.js                |  40 ----------
 src/app/routes/BarRoute/BarRoute.module.scss       |   7 --
 src/app/routes/BarRoute/BarRoute.spec.js           |  11 ---
 src/app/routes/BarRoute/BarRoute.spec.js.snap      |  35 ---------
 src/app/routes/HomeRoute/HomeRoute.js              |   6 --
 src/app/routes/HomeRoute/HomeRoute.spec.js.snap    |  22 ------
 src/app/routes/PrivateRoute/PrivateRoute.js        |  21 ------
 src/app/sagas/index.js                             |  35 ---------
 src/app/sagas/index.spec.js                        |  35 ---------
 src/assets/avatar.jpeg                             | Bin 5553 -> 0 bytes
 src/server/api/index.js                            |   3 -
 src/server/middleware/flash-messages.js            |  21 ------
 src/server/router.js                               |   3 -
 test/integration/client/app.test.js                |   6 +-
 test/integration/client/bar.route.test.js          |  40 ----------
 test/integration/client/private.route.test.js      |  61 ---------------
 test/integration/server/server-api.test.js         |   7 --
 44 files changed, 17 insertions(+), 1167 deletions(-)
 delete mode 100644 src/app/components/@FlashMessages/FlashMessages.js
 delete mode 100644 src/app/components/@FlashMessages/FlashMessages.spec.js
 delete mode 100644 src/app/components/@FlashMessages/Msg.js
 delete mode 100644 src/app/components/@FlashMessages/Msg.scss
 delete mode 100644 src/app/components/@FlashMessages/Msg.spec.js
 delete mode 100644 src/app/components/App/App.module.scss
 delete mode 100644 src/app/components/HeadNavigation/HeadNavigation.js
 delete mode 100644 src/app/components/HeadNavigation/HeadNavigation.module.scss
 delete mode 100644 src/app/components/HeadNavigation/HeadNavigation.spec.js
 delete mode 100644 src/app/modules/bar/bar.actions.js
 delete mode 100644 src/app/modules/bar/bar.actions.spec.js
 delete mode 100644 src/app/modules/bar/bar.constants.js
 delete mode 100644 src/app/modules/bar/bar.reducers.js
 delete mode 100644 src/app/modules/bar/bar.reducers.spec.js
 delete mode 100644 src/app/modules/bar/bar.selectors.js
 delete mode 100644 src/app/modules/flash/flash.actions.js
 delete mode 100644 src/app/modules/flash/flash.actions.spec.js
 delete mode 100644 src/app/modules/flash/flash.constants.js
 delete mode 100644 src/app/modules/flash/flash.reducers.js
 delete mode 100644 src/app/modules/flash/flash.reducers.spec.js
 delete mode 100644 src/app/modules/flash/flash.selectors.js
 delete mode 100644 src/app/modules/flash/flash.selectors.spec.js
 delete mode 100644 src/app/routes/BarRoute/BarRoute.js
 delete mode 100644 src/app/routes/BarRoute/BarRoute.module.scss
 delete mode 100644 src/app/routes/BarRoute/BarRoute.spec.js
 delete mode 100644 src/app/routes/BarRoute/BarRoute.spec.js.snap
 delete mode 100644 src/app/routes/PrivateRoute/PrivateRoute.js
 delete mode 100644 src/assets/avatar.jpeg
 delete mode 100644 src/server/middleware/flash-messages.js
 delete mode 100644 test/integration/client/bar.route.test.js
 delete mode 100644 test/integration/client/private.route.test.js

diff --git a/src/app/components/@FlashMessages/FlashMessages.js b/src/app/components/@FlashMessages/FlashMessages.js
deleted file mode 100644
index 1b22e2f..0000000
--- a/src/app/components/@FlashMessages/FlashMessages.js
+++ /dev/null
@@ -1,31 +0,0 @@
-import { connect } from 'react-redux'
-import PropTypes from 'prop-types'
-import { Bem, cleanProps } from 'app/utils'
-import { getMessages } from 'app/modules/flash/flash.selectors'
-import Msg from './Msg'
-
-const bem = new Bem('FlashMessages')
-
-@connect(state => ({
-  messages: getMessages(state),
-}))
-export default class FlashMessages extends React.Component {
-  static propTypes = {
-    messages: PropTypes.array,
-  };
-
-  static defaultProps = {
-    messages: [],
-  };
-
-  render() {
-    const { messages, ...props } = this.props
-    return (
-      <div {...bem()} {...cleanProps(props)}>
-        {messages.map(msg => (
-          <Msg key={msg.id} msg={msg} />
-        ))}
-      </div>
-    )
-  }
-}
diff --git a/src/app/components/@FlashMessages/FlashMessages.spec.js b/src/app/components/@FlashMessages/FlashMessages.spec.js
deleted file mode 100644
index c50400e..0000000
--- a/src/app/components/@FlashMessages/FlashMessages.spec.js
+++ /dev/null
@@ -1,44 +0,0 @@
-import fixtures from 'helpers/fixtures'
-import { WrappedComponent as FlashMessages } from './FlashMessages'
-import Msg from './Msg'
-
-describe(`FlashMessages Component`, function () {
-  const shallowFM = props => shallow(<FlashMessages {...props} />)
-
-  beforeEach(() => {
-    this.wrapper = shallowFM()
-  })
-
-  it(`renders a div with className as its root node`, () => {
-    const rootNode = this.wrapper.at(0)
-    expect(rootNode).to.have.tagName('div')
-    expect(rootNode).to.have.className('FlashMessages')
-  })
-
-  it(`renders an empty div when no messages`, () => {
-    expect(this.wrapper.children()).to.have.length(0)
-  })
-
-  context(`Given Messages`, () => {
-    beforeEach(() => {
-      this.messages = fixtures(
-        'makeMessages',
-        'addMessageCollection',
-      )
-      this.wrapper.setProps({
-        messages: this.messages,
-      })
-    })
-
-    it(`renders a Msg component for each message in props`, () => {
-      expect(
-        this.wrapper.find(Msg)
-      ).to.have.length(this.messages.length)
-      this.messages.forEach(msg => {
-        const item = this.wrapper.find({ msg })
-        expect(item).to.have.length(1)
-        expect(item.type()).to.eql(Msg)
-      })
-    })
-  })
-})
diff --git a/src/app/components/@FlashMessages/Msg.js b/src/app/components/@FlashMessages/Msg.js
deleted file mode 100644
index 4f39259..0000000
--- a/src/app/components/@FlashMessages/Msg.js
+++ /dev/null
@@ -1,40 +0,0 @@
-import { connect } from 'react-redux'
-import PropTypes from 'prop-types'
-import { Bem, noop, cleanProps } from 'app/utils'
-import { removeMessage } from 'app/modules/flash/flash.actions'
-import './Msg.scss'
-
-const bem = new Bem('Msg')
-
-@connect(null, { onClickClose: removeMessage })
-export default class Msg extends React.Component {
-  static propTypes = {
-    msg: PropTypes.shape({
-      id: PropTypes.string,
-      type: PropTypes.oneOf([ 'error', 'good', 'info' ]),
-      message: PropTypes.string,
-    }),
-    onClickClose: PropTypes.func,
-  };
-
-  static defaultProps = {
-    msg: {},
-    onClickClose: noop,
-  };
-
-  clickMessage = () => {
-    this.props.onClickClose(this.props.msg.id)
-  }
-
-  render() {
-    const { msg, className, ...props } = this.props
-    return (
-      <span {...bem(null, msg.type, className)} {...cleanProps(props)}>
-        {msg.message}
-        <button {...bem('close')} onClick={this.clickMessage}>
-          &times;
-        </button>
-      </span>
-    )
-  }
-}
diff --git a/src/app/components/@FlashMessages/Msg.scss b/src/app/components/@FlashMessages/Msg.scss
deleted file mode 100644
index 6015dba..0000000
--- a/src/app/components/@FlashMessages/Msg.scss
+++ /dev/null
@@ -1,31 +0,0 @@
-@import '~vars';
-@import '~tao-scss/index';
-
-.Msg {
-  display: block;
-  margin-bottom: rem(5px);
-
-  &--info {
-    color: $info-blue;
-  }
-
-  &--error {
-    color: $error-red;
-  }
-
-  &--good {
-    color: $good-green;
-  }
-
-  &__close {
-    border: rem(1px) solid $border-grey;
-    border-radius: rem(8px);
-    font-size: em(16px);
-    margin: 0 rem(8px);
-    padding: 0 rem(4px);
-
-    &:hover {
-      cursor: pointer;
-    }
-  }
-}
diff --git a/src/app/components/@FlashMessages/Msg.spec.js b/src/app/components/@FlashMessages/Msg.spec.js
deleted file mode 100644
index 86b089e..0000000
--- a/src/app/components/@FlashMessages/Msg.spec.js
+++ /dev/null
@@ -1,82 +0,0 @@
-import fixtures from 'helpers/fixtures'
-import { WrappedComponent as Msg } from './Msg'
-
-describe(`Msg Component`, function () {
-  const shallowM = props => shallow(<Msg {...props} />)
-
-  beforeEach(() => {
-    this.messages = fixtures(
-      'makeMessages',
-      'addMessageCollection',
-    )
-    this.msg = _.sample(this.messages)
-    this.wrapper = shallowM()
-  })
-
-  it(`renders a span with Msg and styles.msg classNames`, () => {
-    expect(this.wrapper).to.have.tagName('span')
-    expect(this.wrapper).to.have.className('Msg')
-  })
-
-  it(`allows extending classNames`, () => {
-    const className = 'test-class-name'
-    this.wrapper.setProps({ className })
-    expect(this.wrapper).to.have.className(className)
-  })
-
-  it(`transfers props to the root element`, () => {
-    const otherProps = {
-      id: 'bar',
-      'data-other': 'prop',
-    }
-    this.wrapper.setProps(otherProps)
-    const rootNode = this.wrapper.at(0)
-    expect(rootNode.props()).to.shallowDeepEqual(otherProps)
-  })
-
-  it(`renders the message as first child`, () => {
-    const firstChild = shallowM({ msg: this.msg }).childAt(0)
-    expect(firstChild).to.have.text(this.msg.message)
-  })
-
-  it(`renders the button.Msg__close as last child`, () => {
-    const TIMES = '\u00D7'
-    const lastChild = shallowM({ msg: this.msg }).childAt(1)
-    expect(lastChild).to.have.tagName('button')
-    expect(lastChild).to.have.className('Msg__close')
-    expect(lastChild).to.have.text(TIMES)
-  })
-
-  it(`only renders the close when no message`, () => {
-    const children = this.wrapper.children()
-    expect(children).to.have.length(1)
-    expect(children.at(0)).to.have.className('Msg__close')
-  })
-
-  it(`has the bem-modifier according to its type`, () => {
-    this.messages.forEach(msg => {
-      this.wrapper = shallowM({ msg })
-      expect(this.wrapper).to.have.className(`Msg--${msg.type}`)
-    })
-  })
-
-  describe(`Close button`, () => {
-    const clickHandler = sinon.spy()
-
-    beforeEach(() => {
-      this.wrapper.setProps({
-        msg: this.msg,
-        onClickClose: clickHandler,
-      })
-    })
-
-    afterEach(() => {
-      clickHandler.reset()
-    })
-
-    it(`dispatches a removeMsg with the msg id when clicked`, () => {
-      this.wrapper.find('.Msg__close').simulate('click')
-      expect(clickHandler).to.have.been.calledWith(this.msg.id)
-    })
-  })
-})
diff --git a/src/app/components/App/App.js b/src/app/components/App/App.js
index 83cc009..b1e82f6 100644
--- a/src/app/components/App/App.js
+++ b/src/app/components/App/App.js
@@ -1,13 +1,6 @@
 import DocumentMeta from 'react-helmet'
-import { Switch, Route } from 'react-router-dom'
-import HeadNavigation from 'app/components/HeadNavigation/HeadNavigation'
-import FlashMessages from 'app/components/@FlashMessages/FlashMessages'
+import { Switch } from 'react-router-dom'
 import CodeSplitRoute from 'app/components/CodeSplitRoute'
-import PrivateRoute from 'app/routes/PrivateRoute/PrivateRoute'
-// example image import
-import avatarPath from 'assets/avatar.jpeg'
-// example s?css module import
-import style from './App.module.scss'
 
 const log = debug('App.js')
 
@@ -15,40 +8,27 @@ export default class App extends React.Component {
   render() {
     log('render')
     return (
-      <div className={style.app}>
+      <div>
         <DocumentMeta
-          defaultTitle='Breko Hub'
-          titleTemplate='%s | Breko Hub'>
+          defaultTitle='My App'
+          titleTemplate='%s | My App'>
           <html lang='en' />
           <meta charSet='utf-8' />
           <meta name='viewport' content='width=device-width,initial-scale=1.0' />
-          <meta name='description' content='Breko Hub, a minimal boilerplate for building universal react applications' />
-          <meta name='keywords' content='react,redux,react-router,koa,universal,babel,es7,hmr,webpack' />
+          <meta name='description' content='' />
+          <meta name='keywords' content='' />
         </DocumentMeta>
-        <HeadNavigation />
-        <FlashMessages />
-        <img src={avatarPath} alt='me' width='70' />
-        <h1>Breko Hub</h1>
-        <main className={style.content}>
+        <main>
           <Switch>
             <CodeSplitRoute
               exact
               path='/'
               load={() => import('app/routes/HomeRoute/HomeRoute')}
             />
-            <CodeSplitRoute
-              path='/bar'
-              load={() => import('app/routes/BarRoute/BarRoute')}
-            />
             <CodeSplitRoute
               path='/oops'
               load={() => import('app/routes/OopsRoute/OopsRoute')}
             />
-            <Route
-              path='/private'
-              // no dynamic import when server side redirect
-              component={PrivateRoute}
-            />
             <CodeSplitRoute
               load={() => import('app/routes/NotFoundRoute/NotFoundRoute')}
             />
diff --git a/src/app/components/App/App.module.scss b/src/app/components/App/App.module.scss
deleted file mode 100644
index 1a097f4..0000000
--- a/src/app/components/App/App.module.scss
+++ /dev/null
@@ -1,13 +0,0 @@
-@import '~vars';
-@import '~tao-scss/index';
-
-.app {
-  color: $font-color;
-  font: {
-    size: rem(17px);
-  }
-}
-
-.content {
-  padding: rem(5px);
-}
diff --git a/src/app/components/App/App.spec.js b/src/app/components/App/App.spec.js
index eceeedd..3a06293 100644
--- a/src/app/components/App/App.spec.js
+++ b/src/app/components/App/App.spec.js
@@ -1,9 +1,5 @@
 import DocumentMeta from 'react-helmet'
-import HeadNavigation from 'app/components/HeadNavigation/HeadNavigation'
-import FlashMessages from 'app/components/@FlashMessages/FlashMessages'
 import App from './App'
-import styles from './App.module.scss'
-import avatarPath from 'assets/avatar.jpeg'
 
 describe(`App Component`, function () {
   helpers.setupSnapshots(__filename)
@@ -13,7 +9,7 @@ describe(`App Component`, function () {
   })
 
   it(`renders a div tag with className at rootNode`, () => {
-    expect(this.wrapper).to.have.className(styles.app)
+    expect(this.wrapper).to.have.type('div')
   })
 
   it(`renders a Helmet document meta as firtChild`, () => {
@@ -21,66 +17,27 @@ describe(`App Component`, function () {
     expect(firstChild).to.have.type(DocumentMeta)
   })
 
-  it(`renders HeadNavigation as second child`, () => {
+  it(`renders a main.content as second child`, () => {
     const secondChild = this.wrapper.childAt(1)
-    expect(secondChild).to.have.type(HeadNavigation)
-  })
-
-  it(`renders FlashMessages as third child`, () => {
-    const thirdChild = this.wrapper.childAt(2)
-    expect(thirdChild).to.have.type(FlashMessages)
-  })
-
-  it(`renders an img as fourth child`, () => {
-    const fourthChild = this.wrapper.childAt(3)
-    expect(fourthChild).to.have.type('img')
-  })
-
-  it(`renders a h1 as fifth child`, () => {
-    const fifthChild = this.wrapper.childAt(4)
-    expect(fifthChild).to.have.type('h1')
-  })
-
-  it(`renders a main.content as sixth child`, () => {
-    const sixthChild = this.wrapper.childAt(5)
-    expect(sixthChild).to.have.type('main')
-    expect(sixthChild).to.have.className(styles.content)
+    expect(secondChild).to.have.type('main')
   })
 
   describe(`DocumentMeta`, () => {
     it(`sets the meta options`, () => {
       expect(this.wrapper.find(DocumentMeta).getElement()).to.eql(
         <DocumentMeta
-          defaultTitle='Breko Hub'
-          titleTemplate='%s | Breko Hub'>
+          defaultTitle='My App'
+          titleTemplate='%s | My App'>
           <html lang='en' />
           <meta charSet='utf-8' />
           <meta name='viewport' content='width=device-width,initial-scale=1.0' />
-          <meta name='description' content='Breko Hub, a minimal boilerplate for building universal react applications' />
-          <meta name='keywords' content='react,redux,react-router,koa,universal,babel,es7,hmr,webpack' />
+          <meta name='description' content='' />
+          <meta name='keywords' content='' />
         </DocumentMeta>
       )
     })
   })
 
-  describe(`Img`, () => {
-    it(`has avatar as src with alt=me and width=70`, () => {
-      const img = this.wrapper.find('img')
-      expect(img.props()).to.shallowDeepEqual({
-        src: avatarPath,
-        alt: 'me',
-        width: '70',
-      })
-    })
-  })
-
-  describe(`Title`, () => {
-    it(`should have "Breko Hub" as text child`, () => {
-      const title = this.wrapper.find('h1')
-      expect(title.text()).to.contain('Breko Hub')
-    })
-  })
-
   describe(`Main`, () => {
     it(`renders routes inside Main`, () => {
       expect(
diff --git a/src/app/components/App/App.spec.js.snap b/src/app/components/App/App.spec.js.snap
index f41d096..0946b90 100644
--- a/src/app/components/App/App.spec.js.snap
+++ b/src/app/components/App/App.spec.js.snap
@@ -1,27 +1,17 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`App Component Main renders routes inside Main 1`] = `
-<main
-  className="src-app-components-App-App-module-content"
->
+<main>
   <Switch>
     <CodeSplitRoute
       exact={true}
       load={[Function]}
       path="/"
     />
-    <CodeSplitRoute
-      load={[Function]}
-      path="/bar"
-    />
     <CodeSplitRoute
       load={[Function]}
       path="/oops"
     />
-    <Route
-      component={[Function]}
-      path="/private"
-    />
     <CodeSplitRoute
       load={[Function]}
     />
diff --git a/src/app/components/HeadNavigation/HeadNavigation.js b/src/app/components/HeadNavigation/HeadNavigation.js
deleted file mode 100644
index 5b761e7..0000000
--- a/src/app/components/HeadNavigation/HeadNavigation.js
+++ /dev/null
@@ -1,24 +0,0 @@
-import cx from 'classnames'
-import { NavLink } from 'react-router-dom'
-import styles from './HeadNavigation.module.scss'
-
-// Putting this inside a connect will break activeClassName
-// unless you also subscribe to changes to routing state or context
-export default class HeadNavigation extends React.Component {
-  render() {
-    const { className, ...props } = this.props
-    return (
-      <nav className={cx(styles.nav, className)} {...props}>
-        <NavLink exact activeClassName={styles.active} to='/'>
-          Home
-        </NavLink>
-        <NavLink activeClassName={styles.active} to='/bar'>
-          Bar
-        </NavLink>
-        <NavLink activeClassName={styles.active} to='/private'>
-          Private
-        </NavLink>
-      </nav>
-    )
-  }
-}
diff --git a/src/app/components/HeadNavigation/HeadNavigation.module.scss b/src/app/components/HeadNavigation/HeadNavigation.module.scss
deleted file mode 100644
index 91c671e..0000000
--- a/src/app/components/HeadNavigation/HeadNavigation.module.scss
+++ /dev/null
@@ -1,16 +0,0 @@
-@import '~vars';
-@import '~tao-scss/index';
-
-.nav a {
-  color: $link-color;
-  margin-right: rem(10px);
-  text-decoration: none;
-
-  &:last-of-type {
-    margin-right: 0;
-  }
-}
-
-a.active {
-  color: $active-color;
-}
diff --git a/src/app/components/HeadNavigation/HeadNavigation.spec.js b/src/app/components/HeadNavigation/HeadNavigation.spec.js
deleted file mode 100644
index f723e15..0000000
--- a/src/app/components/HeadNavigation/HeadNavigation.spec.js
+++ /dev/null
@@ -1,55 +0,0 @@
-import { NavLink } from 'react-router-dom'
-import HeadNavigation from './HeadNavigation'
-import styles from './HeadNavigation.module.scss'
-
-describe(`Head Navigation Component`, function () {
-  const shallowHN = props => shallow(<HeadNavigation {...props} />)
-
-  beforeEach(() => {
-    this.wrapper = shallowHN()
-  })
-
-  it(`renders a <nav> with styles.nav className as rootNode`, () => {
-    const rootNode = this.wrapper.at(0)
-    expect(rootNode).to.have.type('nav')
-  })
-
-  it(`extends styles.nav className on rootNode`, () => {
-    const className = 'test-class-name'
-    const rootNode = shallowHN({ className }).at(0)
-    expect(rootNode).to.have.className(styles.nav)
-    expect(rootNode).to.have.className(className)
-  })
-
-  it(`passes other props through`, () => {
-    const otherProps = { id: 'foo', 'data-prop': 'bar' }
-    const rootNode = shallowHN(otherProps).at(0)
-    expect(rootNode.props()).to.shallowDeepEqual(otherProps)
-  })
-
-  describe(`NavLinks`, () => {
-    const links = [
-      { to: '/', content: 'Home', exact: true },
-      { to: '/bar', content: 'Bar' },
-      { to: '/private', content: 'Private' },
-    ]
-
-    it(`only renders the necessary links`, () => {
-      expect(
-        this.wrapper.find(NavLink)
-      ).to.have.length(links.length)
-    })
-
-    links.forEach((link, idx) =>
-      it(`renders the ${link.content} link`, () => {
-        const navLink = this.wrapper.find(NavLink).at(idx)
-        expect(navLink.props()).to.shallowDeepEqual({
-          to: link.to,
-          children: link.content,
-          activeClassName: styles.active,
-          ...link.exact && { exact: true },
-        })
-      })
-    )
-  })
-})
diff --git a/src/app/composition/root-reducer.js b/src/app/composition/root-reducer.js
index 214ab58..9390aeb 100644
--- a/src/app/composition/root-reducer.js
+++ b/src/app/composition/root-reducer.js
@@ -1,10 +1,6 @@
 import { combineReducers } from 'redux'
 import { routerReducer as routing } from 'react-router-redux'
-import { flashReducers as flash } from 'app/modules/flash/flash.reducers'
-import { barReducers as bar } from 'app/modules/bar/bar.reducers'
 
 export default combineReducers({
-  flash,
-  bar,
   routing,
 })
diff --git a/src/app/copy.js b/src/app/copy.js
index 3db6ba4..e69de29 100644
--- a/src/app/copy.js
+++ b/src/app/copy.js
@@ -1,4 +0,0 @@
-
-export const privateRoute = {
-  denied: `You may not view the private route!!`,
-}
diff --git a/src/app/modules/bar/bar.actions.js b/src/app/modules/bar/bar.actions.js
deleted file mode 100644
index f354b5d..0000000
--- a/src/app/modules/bar/bar.actions.js
+++ /dev/null
@@ -1,9 +0,0 @@
-import { request } from 'app/utils'
-import { API_FETCH } from './bar.constants'
-
-export const apiFetch = () => ({
-  type: API_FETCH,
-  payload: {
-    promise: request.fetch('/api/bar'),
-  },
-})
diff --git a/src/app/modules/bar/bar.actions.spec.js b/src/app/modules/bar/bar.actions.spec.js
deleted file mode 100644
index 276eb31..0000000
--- a/src/app/modules/bar/bar.actions.spec.js
+++ /dev/null
@@ -1,31 +0,0 @@
-import { request } from 'app/utils'
-import { API_FETCH } from './bar.constants'
-import { apiFetch } from './bar.actions'
-
-describe(`Bar Actions`, function () {
-  describe(`apiFetch()`, () => {
-    beforeEach(() => {
-      sinon.stub(request, 'fetch')
-    })
-
-    afterEach(() => {
-      request.fetch.restore()
-    })
-
-    it(`returns an action with type API_FETCH`, () => {
-      expect(apiFetch()).to.have.property('type', API_FETCH)
-    })
-
-    it(`calls fetch with /api/bar`, () => {
-      apiFetch()
-      expect(request.fetch).to.have.been.calledWith('/api/bar')
-    })
-
-    it(`resolves the promise from fetching /api/bar`, () => {
-      const requestResolve = { some: 'data' }
-      request.fetch.returns(Promise.resolve(requestResolve))
-
-      expect(apiFetch().payload.promise).to.eventually.eql(requestResolve)
-    })
-  })
-})
diff --git a/src/app/modules/bar/bar.constants.js b/src/app/modules/bar/bar.constants.js
deleted file mode 100644
index 9e4603a..0000000
--- a/src/app/modules/bar/bar.constants.js
+++ /dev/null
@@ -1,2 +0,0 @@
-
-export const API_FETCH = 'bar/API_FETCH'
diff --git a/src/app/modules/bar/bar.reducers.js b/src/app/modules/bar/bar.reducers.js
deleted file mode 100644
index 7b7de15..0000000
--- a/src/app/modules/bar/bar.reducers.js
+++ /dev/null
@@ -1,28 +0,0 @@
-import { PENDING, REJECTED, FULFILLED } from 'redux-promise-middleware'
-import { typeToReducer, get } from 'app/utils'
-import { API_FETCH } from './bar.constants'
-
-const getBar = get('payload.bar')
-
-const initialState = {
-  isPending: false,
-  error: false,
-  data: [],
-}
-
-export const barReducers = typeToReducer({
-  [API_FETCH]: {
-    [PENDING]: () => ({
-      ...initialState,
-      isPending: true,
-    }),
-    [REJECTED]: (state, action) => ({
-      ...initialState,
-      error: action.payload,
-    }),
-    [FULFILLED]: (state, action) => ({
-      ...initialState,
-      data: getBar(action),
-    }),
-  },
-}, initialState)
diff --git a/src/app/modules/bar/bar.reducers.spec.js b/src/app/modules/bar/bar.reducers.spec.js
deleted file mode 100644
index f396e0e..0000000
--- a/src/app/modules/bar/bar.reducers.spec.js
+++ /dev/null
@@ -1,72 +0,0 @@
-import { PENDING, REJECTED, FULFILLED } from 'redux-promise-middleware'
-import { barReducers } from './bar.reducers'
-import { API_FETCH } from './bar.constants'
-
-describe(`Bar Reducers`, function () {
-  const initialState = {
-    isPending: false,
-    error: false,
-    data: [],
-  }
-  const irrelevantAction = { type: 'IRRELEVANT_ACTION' }
-
-  it(`returns the initialState when no state`, () => {
-    expect(barReducers(undefined, irrelevantAction)).to.eql(initialState)
-  })
-
-  describe(API_FETCH, () => {
-    const stateBeforeDispatch = {
-      data: 'test dirty data',
-      error: new Error('test previous state error'),
-      isPending: !initialState.isPending,
-    }
-
-    describe(PENDING, () => {
-      it(`sets initialState with isPending=true`, () => {
-        const apiFetchPendingAction = {
-          type: `${API_FETCH}_${PENDING}`,
-        }
-        expect(
-          barReducers(stateBeforeDispatch, apiFetchPendingAction)
-        ).to.eql({
-          ...initialState,
-          isPending: true,
-        })
-      })
-    })
-
-    describe(REJECTED, () => {
-      it(`sets initialState with payload as error`, () => {
-        const apiFetchRejectedAction = {
-          type: `${API_FETCH}_${REJECTED}`,
-          error: true,
-          payload: new Error('api_fetch error'),
-        }
-        expect(
-          barReducers(stateBeforeDispatch, apiFetchRejectedAction)
-        ).to.eql({
-          ...initialState,
-          error: apiFetchRejectedAction.payload,
-        })
-      })
-    })
-
-    describe(FULFILLED, () => {
-      it(`sets initialState with payload as data`, () => {
-        const apiFetchFulfilledAction = {
-          type: `${API_FETCH}_${FULFILLED}`,
-          error: true,
-          payload: {
-            bar: [ 'some', 'test', 'data' ],
-          },
-        }
-        expect(
-          barReducers(stateBeforeDispatch, apiFetchFulfilledAction)
-        ).to.eql({
-          ...initialState,
-          data: apiFetchFulfilledAction.payload.bar,
-        })
-      })
-    })
-  })
-})
diff --git a/src/app/modules/bar/bar.selectors.js b/src/app/modules/bar/bar.selectors.js
deleted file mode 100644
index a42f1b0..0000000
--- a/src/app/modules/bar/bar.selectors.js
+++ /dev/null
@@ -1,3 +0,0 @@
-import { get } from 'app/utils'
-
-export const getBar = get('bar.data', [])
diff --git a/src/app/modules/flash/flash.actions.js b/src/app/modules/flash/flash.actions.js
deleted file mode 100644
index cef364b..0000000
--- a/src/app/modules/flash/flash.actions.js
+++ /dev/null
@@ -1,18 +0,0 @@
-import uuid from 'uuid'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from './flash.constants'
-
-const makeFlash = (message, type='info') => ({
-  type,
-  message,
-  id: uuid.v1(),
-})
-
-export const removeMessage = (id) => ({
-  type: REMOVE_MESSAGE,
-  payload: { id },
-})
-
-export const addMessage = (message, type='info') => ({
-  type: ADD_MESSAGE,
-  payload: makeFlash(message, type),
-})
diff --git a/src/app/modules/flash/flash.actions.spec.js b/src/app/modules/flash/flash.actions.spec.js
deleted file mode 100644
index 2c1325e..0000000
--- a/src/app/modules/flash/flash.actions.spec.js
+++ /dev/null
@@ -1,56 +0,0 @@
-import uuid from 'uuid'
-import * as actions from './flash.actions'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from './flash.constants'
-
-describe('Flash Actions', function () {
-  describe('addMessage()', () => {
-    beforeEach(() => {
-      sinon.stub(uuid, 'v1')
-    })
-
-    afterEach(() => {
-      uuid.v1.restore()
-    })
-
-    it('returns an action with type ADD_MESSAGE', () => {
-      expect(
-        actions.addMessage()
-      ).to.have.property('type', ADD_MESSAGE)
-    })
-
-    it('returns an action with flash msg and a default type', () => {
-      const uuidReturn = { data: { some: 'data' } }
-      const message = 'test message'
-      uuid.v1.returns(uuidReturn)
-      expect(
-        actions.addMessage(message)
-      ).to.have.property('payload').which.eql({
-        type: 'info',
-        message,
-        id: uuidReturn,
-      })
-    })
-
-    it('allows overwriting of the message type', () => {
-      const type = 'test type'
-      expect(
-        actions.addMessage(null, type)
-      ).to.have.nested.property('payload.type', type)
-    })
-  })
-
-  describe('removeMessage()', () => {
-    it('returns an action with type REMOVE_MESSAGE', () => {
-      expect(
-        actions.removeMessage()
-      ).to.have.property('type', REMOVE_MESSAGE)
-    })
-
-    it('sets payload with id from arguments', () => {
-      const id = 'test flash id'
-      expect(
-        actions.removeMessage(id)
-      ).to.have.property('payload').which.eql({ id })
-    })
-  })
-})
diff --git a/src/app/modules/flash/flash.constants.js b/src/app/modules/flash/flash.constants.js
deleted file mode 100644
index ba015ac..0000000
--- a/src/app/modules/flash/flash.constants.js
+++ /dev/null
@@ -1,3 +0,0 @@
-
-export const REMOVE_MESSAGE = 'flash/REMOVE_MESSAGE'
-export const ADD_MESSAGE = 'flash/ADD_MESSAGE'
diff --git a/src/app/modules/flash/flash.reducers.js b/src/app/modules/flash/flash.reducers.js
deleted file mode 100644
index 94162ba..0000000
--- a/src/app/modules/flash/flash.reducers.js
+++ /dev/null
@@ -1,23 +0,0 @@
-import { filter } from 'ramda'
-import { typeToReducer, get } from 'app/utils'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from './flash.constants'
-
-const getFlashId = get('payload.id')
-
-const initialState = {
-  messages: [],
-}
-
-export const flashReducers = typeToReducer({
-  [REMOVE_MESSAGE]: (state, action) => ({
-    ...state,
-    messages: filter(
-      flash => flash.id !== getFlashId(action),
-      state.messages
-    ),
-  }),
-  [ADD_MESSAGE]: (state, action) => ({
-    ...state,
-    messages: [ ...state.messages, action.payload ],
-  }),
-}, initialState)
diff --git a/src/app/modules/flash/flash.reducers.spec.js b/src/app/modules/flash/flash.reducers.spec.js
deleted file mode 100644
index 4e2e684..0000000
--- a/src/app/modules/flash/flash.reducers.spec.js
+++ /dev/null
@@ -1,80 +0,0 @@
-import fixtures from 'helpers/fixtures'
-import { flashReducers } from './flash.reducers'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from './flash.constants'
-
-describe(`Flash Reducers`, function () {
-  const initialState = {
-    messages: [],
-  }
-  const irrelevantAction = { type: 'IRRELEVANT_ACTION' }
-
-  it(`should return the initial state`, () => {
-    expect(flashReducers(undefined, irrelevantAction)).to.eql(initialState)
-  })
-
-  describe(REMOVE_MESSAGE, () => {
-    const messages = fixtures(
-      'makeMessages',
-      'addMessageCollection',
-    )
-    const previousState = {
-      messages,
-      test: 'test previous state',
-    }
-    const removeFlashAction = {
-      type: REMOVE_MESSAGE,
-      payload: {
-        id: _.sample(messages).id,
-      },
-    }
-
-    it(`does nothing when the id isn't contained`, () => {
-      function assertStateUnchanged(state, id) {
-        removeFlashAction.payload.id = id
-        expect(
-          flashReducers(state, removeFlashAction)
-        ).to.eql(state)
-      }
-      assertStateUnchanged(previousState, 'not-contained')
-      assertStateUnchanged(previousState, void 0)
-      assertStateUnchanged(previousState, 99)
-      assertStateUnchanged(previousState, {})
-      assertStateUnchanged(previousState, '')
-    })
-
-    it(`removes a message by id`, () => {
-      _.map(messages, ({ id }) => {
-        removeFlashAction.payload.id = id
-        const actual = flashReducers(previousState, removeFlashAction)
-        const expectedMessages = _.reject(messages, {
-          id: removeFlashAction.payload.id,
-        })
-        expect(actual.messages).to.eql(expectedMessages)
-      })
-    })
-  })
-
-  describe(ADD_MESSAGE, () => {
-    const messages = fixtures(
-      'makeMessages',
-      'addMessageCollection',
-    )
-    const previousState = {
-      messages,
-      test: 'test previous state',
-    }
-    const addFlashAction = {
-      type: ADD_MESSAGE,
-      payload: { id: 'test payload id' },
-    }
-
-    it(`keeps previous state and adding action.payload to messages`, () => {
-      expect(
-        flashReducers(previousState, addFlashAction)
-      ).to.eql({
-        ...previousState,
-        messages: messages.concat(addFlashAction.payload),
-      })
-    })
-  })
-})
diff --git a/src/app/modules/flash/flash.selectors.js b/src/app/modules/flash/flash.selectors.js
deleted file mode 100644
index 69a71c2..0000000
--- a/src/app/modules/flash/flash.selectors.js
+++ /dev/null
@@ -1,7 +0,0 @@
-import { createSelector } from 'reselect'
-import { head } from 'ramda'
-import { get } from 'app/utils'
-
-export const getMessages = get('flash.messages', [])
-
-export const getNextMessage = createSelector([ getMessages ], head)
diff --git a/src/app/modules/flash/flash.selectors.spec.js b/src/app/modules/flash/flash.selectors.spec.js
deleted file mode 100644
index 82c32bf..0000000
--- a/src/app/modules/flash/flash.selectors.spec.js
+++ /dev/null
@@ -1,52 +0,0 @@
-import fixtures from 'helpers/fixtures'
-import * as flashSelectors from './flash.selectors'
-
-describe('Flash Selectors', function () {
-  describe('getMessages()', () => {
-    it('returns an empty array by default', () => {
-      expect(
-        flashSelectors.getMessages(null)
-      ).to.be.an('array').with.length(0)
-    })
-
-    it('returns the flash messages', () => {
-      const state = {
-        flash: {
-          messages: fixtures(
-            'makeMessages',
-            'addRandomMessage',
-            'addRandomMessage',
-            'addRandomMessage',
-            'addRandomMessage',
-          ),
-        },
-      }
-      expect(flashSelectors.getMessages(state)).to.eql(state.flash.messages)
-    })
-  })
-
-  describe('getNextMessage()', () => {
-    it('returns undefined by default', () => {
-      expect(
-        flashSelectors.getNextMessage(null)
-      ).to.eql(undefined)
-    })
-
-    it('returns the flash message start of list', () => {
-      const state = {
-        flash: {
-          messages: fixtures(
-            'makeMessages',
-            'addRandomMessage',
-            'addRandomMessage',
-            'addRandomMessage',
-            'addRandomMessage',
-          ),
-        },
-      }
-      expect(
-        flashSelectors.getNextMessage(state)
-      ).to.eql(state.flash.messages[0])
-    })
-  })
-})
diff --git a/src/app/routes/BarRoute/BarRoute.js b/src/app/routes/BarRoute/BarRoute.js
deleted file mode 100644
index c9e17f5..0000000
--- a/src/app/routes/BarRoute/BarRoute.js
+++ /dev/null
@@ -1,40 +0,0 @@
-import { connect } from 'react-redux'
-import DocumentMeta from 'react-helmet'
-import { noop } from 'app/utils'
-import { apiFetch } from 'app/modules/bar/bar.actions'
-import { getBar } from 'app/modules/bar/bar.selectors'
-import style from './BarRoute.module.scss'
-
-@connect(state => ({
-  bar: getBar(state),
-}), { apiFetch })
-export default class BarRoute extends React.Component {
-  static defaultProps = {
-    bar: [],
-    apiFetch: noop,
-  };
-
-  componentDidMount() {
-    this.props.apiFetch()
-  }
-
-  render() {
-    const { bar } = this.props
-    return (
-      <section className='BarRoute'>
-        <DocumentMeta>
-          <title>Bar</title>
-        </DocumentMeta>
-        <h3>Bar</h3>
-        <p>This route is making an api request</p>
-        <p>If you change the response from <code>server/api/bar</code> endpoint</p>
-        <p>And then navigate away and back to this route, you'll see the changes immediately</p>
-        <div className={style.block}>
-          {bar.map((item, i) =>
-            <p key={i}>{item}</p>
-          )}
-        </div>
-      </section>
-    )
-  }
-}
diff --git a/src/app/routes/BarRoute/BarRoute.module.scss b/src/app/routes/BarRoute/BarRoute.module.scss
deleted file mode 100644
index 988b1ec..0000000
--- a/src/app/routes/BarRoute/BarRoute.module.scss
+++ /dev/null
@@ -1,7 +0,0 @@
-$grey: #ddd;
-
-.block {
-  background-color: $grey;
-  border-radius: 5px;
-  padding: 2px 10px;
-}
diff --git a/src/app/routes/BarRoute/BarRoute.spec.js b/src/app/routes/BarRoute/BarRoute.spec.js
deleted file mode 100644
index 04b0815..0000000
--- a/src/app/routes/BarRoute/BarRoute.spec.js
+++ /dev/null
@@ -1,11 +0,0 @@
-import { WrappedComponent as BarRoute } from './BarRoute'
-
-describe(`BarRoute Component`, function () {
-  helpers.setupSnapshots(__filename)
-
-  it(`matches snapshot`, () => {
-    expect(
-      snap(shallow(<BarRoute />))
-    ).to.matchSnapshot()
-  })
-})
diff --git a/src/app/routes/BarRoute/BarRoute.spec.js.snap b/src/app/routes/BarRoute/BarRoute.spec.js.snap
deleted file mode 100644
index 7cc9b7e..0000000
--- a/src/app/routes/BarRoute/BarRoute.spec.js.snap
+++ /dev/null
@@ -1,35 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`BarRoute Component matches snapshot 1`] = `
-<section
-  className="BarRoute"
->
-  <HelmetWrapper
-    defer={true}
-    encodeSpecialCharacters={true}
-  >
-    <title>
-      Bar
-    </title>
-  </HelmetWrapper>
-  <h3>
-    Bar
-  </h3>
-  <p>
-    This route is making an api request
-  </p>
-  <p>
-    If you change the response from 
-    <code>
-      server/api/bar
-    </code>
-     endpoint
-  </p>
-  <p>
-    And then navigate away and back to this route, you'll see the changes immediately
-  </p>
-  <div
-    className="src-app-routes-BarRoute-BarRoute-module-block"
-  />
-</section>
-`;
diff --git a/src/app/routes/HomeRoute/HomeRoute.js b/src/app/routes/HomeRoute/HomeRoute.js
index 471ac62..c6f7228 100644
--- a/src/app/routes/HomeRoute/HomeRoute.js
+++ b/src/app/routes/HomeRoute/HomeRoute.js
@@ -7,12 +7,6 @@ export default class HomeRoute extends React.Component {
         <DocumentMeta>
           <title></title>
         </DocumentMeta>
-        <p>Welcome to breko-hub</p>
-        <p>This app is intentionally minimal!</p>
-        <p>There are various mini-examples showing how you can customise to your needs.</p>
-        <p>Breko hub is designed to be quick to develop with:</p>
-        <p>Make a change to the styles in a <code>*.module.scss</code> file or a component and see for yourself!</p>
-        <p>Even the server routes and api endpoints auto update on changes very quickly!</p>
       </section>
     )
   }
diff --git a/src/app/routes/HomeRoute/HomeRoute.spec.js.snap b/src/app/routes/HomeRoute/HomeRoute.spec.js.snap
index d96fa33..ee9dd1a 100644
--- a/src/app/routes/HomeRoute/HomeRoute.spec.js.snap
+++ b/src/app/routes/HomeRoute/HomeRoute.spec.js.snap
@@ -10,27 +10,5 @@ exports[`HomeRoute Component matches snapshot 1`] = `
   >
     <title />
   </HelmetWrapper>
-  <p>
-    Welcome to breko-hub
-  </p>
-  <p>
-    This app is intentionally minimal!
-  </p>
-  <p>
-    There are various mini-examples showing how you can customise to your needs.
-  </p>
-  <p>
-    Breko hub is designed to be quick to develop with:
-  </p>
-  <p>
-    Make a change to the styles in a 
-    <code>
-      *.module.scss
-    </code>
-     file or a component and see for yourself!
-  </p>
-  <p>
-    Even the server routes and api endpoints auto update on changes very quickly!
-  </p>
 </section>
 `;
diff --git a/src/app/routes/PrivateRoute/PrivateRoute.js b/src/app/routes/PrivateRoute/PrivateRoute.js
deleted file mode 100644
index 99eaadf..0000000
--- a/src/app/routes/PrivateRoute/PrivateRoute.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import { connect } from 'react-redux'
-import { replace } from 'react-router-redux'
-import { privateRoute } from 'app/copy'
-import { addMessage } from 'app/modules/flash/flash.actions'
-
-
-@connect(null, { replace, addMessage })
-export default class PrivateRoute extends React.Component {
-  componentWillMount() {
-    this.props.addMessage(privateRoute.denied, 'error')
-    this.props.replace('/')
-  }
-
-  render() {
-    return (
-      <section className='PrivateRoute'>
-        Private
-      </section>
-    )
-  }
-}
diff --git a/src/app/sagas/index.js b/src/app/sagas/index.js
index 9cc6ea0..4f9dd47 100644
--- a/src/app/sagas/index.js
+++ b/src/app/sagas/index.js
@@ -1,37 +1,2 @@
-import { put, fork, take, race, select } from 'redux-saga/effects'
-import { delay } from 'redux-saga'
-import * as flashSelectors from 'app/modules/flash/flash.selectors'
-import * as flashActions from 'app/modules/flash/flash.actions'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from 'app/modules/flash/flash.constants'
-
-const DAEMON = true
-const log = debug('sagas')
-
-export function * timeoutRemoveFlash(nextFlash) {
-  if (nextFlash) {
-    const { removed } = yield race({
-      timeout: delay(4000),
-      removed: take(action =>
-        action.type === REMOVE_MESSAGE
-        && action.payload.id === nextFlash.id
-      ),
-    })
-    if (!removed) {
-      yield put(flashActions.removeMessage(nextFlash.id))
-    }
-  }
-}
-
-export function * takeFlashMessages() {
-  while (DAEMON) {
-    const action = yield take(ADD_MESSAGE)
-    log('Flash added, saga will remove it automatically')
-    yield fork(timeoutRemoveFlash, action.payload)
-  }
-}
-
 export default function * rootSaga() {
-  const nextFlash = yield select(flashSelectors.getNextMessage)
-  yield fork(timeoutRemoveFlash, nextFlash)
-  yield fork(takeFlashMessages)
 }
diff --git a/src/app/sagas/index.spec.js b/src/app/sagas/index.spec.js
index 5e2c5cc..167d549 100644
--- a/src/app/sagas/index.spec.js
+++ b/src/app/sagas/index.spec.js
@@ -1,38 +1,3 @@
-import { select, fork, take } from 'redux-saga/effects'
-import * as flashSelectors from 'app/modules/flash/flash.selectors'
-import { ADD_MESSAGE } from 'app/modules/flash/flash.constants'
-import rootSaga, { timeoutRemoveFlash, takeFlashMessages } from './index'
 
 describe('Saga Tests', function () {
-  describe('Root Saga', () => {
-    beforeEach(() => {
-      this.saga = rootSaga()
-    })
-
-    it('should call select with getNextFlashMessage', () => {
-      const nextFlash = { ret: 'value' }
-      expect(this.saga.next()).to.deep.yield(select(flashSelectors.getNextMessage))
-      expect(this.saga.next(nextFlash)).to.deep.yield(fork(timeoutRemoveFlash, nextFlash))
-      expect(this.saga.next()).to.deep.yield(fork(takeFlashMessages))
-    })
-  })
-
-  describe('takeFlashMessages', () => {
-    beforeEach(() => {
-      this.saga = takeFlashMessages()
-    })
-
-    it('should call take with an add_message', () => {
-      const takeReturn = { payload: { fake: 'stuff' } }
-      expect(this.saga.next()).to.deep.yield(take(ADD_MESSAGE))
-      expect(this.saga.next(takeReturn)).to.deep.yield(fork(timeoutRemoveFlash, takeReturn.payload))
-      expect(this.saga.next().done).to.eql(false)
-    })
-  })
-
-  describe.skip('timeoutRemoveFlash', () => {
-    beforeEach(() => {
-      this.saga = timeoutRemoveFlash()
-    })
-  })
 })
diff --git a/src/assets/avatar.jpeg b/src/assets/avatar.jpeg
deleted file mode 100644
index 37200ab27bc433a9c834a0508ab52a0fb1caf846..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 5553
zcmbW)cQ_l~y8!SgYLBR>9cu4Yvq)75N{1CYRWnjmvu5mBswlN-tx}^(Y_WGyTkX)=
zG_e{)UEkmDKKDM){p;TQp7)%8&U?=DexCE!xtzUR0Wj)m>uLi?NB{tms{y$D3%H|c
zsHI{2$WVpH$zH<crGpcXkBp==kFd8V;)N5Bt{#*}@39t?$45z8M4ZRn+x9ua%a2Em
zM_HQsavq=wAiZ|&pS%jPt0bo+CnqB#r>3B|PDx8mOG`sdLqkW;#7IXEq^F@_WMKr}
zU<QFev<x>{S(sUwm_f|{TtY&6b%u<bikzH^nU02z`Trc3?EoMpARZ7;N^%Qu4M;)?
zB)RMcfUl6`B>xJ)e+J35s~)dYP*PFTTos@h0oO=KNw1NS{?qkUb<ov5fDA~^#4Dq5
z{l*hpid*i?vY|;IDEaPHcYqAXaQt%5Ji@4`S#Gkju?q+a35$r{mRC?zQdZHtucZyu
z(bY3DHZg^nnOoS|J2*NyBV0VaynSBz`uT@PL`Fr&#KtA3yh}}cpPrHVv7oT1xa3o5
z+1Hv{bX|QzV^e2WcTaC$|G?n*#N^cU%<PXj?CRRjU+Wv2Tif`9!=vMqKZMh>e_SL0
z(toqA)_=qPhYNV+x<*DuN=EUIi{#p?t4RtZBj=U5&ZO~#!q)x9E!j{?=6gvWsynFo
z<P343XC7nJEc~~z0{DMu|C0UhU}66+*?+<Q+cgKEB_+9fJW?P40=O`=i%ZBORqij*
z(Xq)mGreA8Te0A105J-?))G@x#}6*0)7=bNrr^u;^pgKopU3PCA+>^nUmuN%cFdAb
zm4_w+|DGK``E4EXSFV0G(bd&6_(pz`1NybUw0c6)sj-OQ^~sc7?Pm``4_>N?(irGU
zRirr!n)BH<TKk!Dx9P1_sS6?$6%>P=8l7L1_st2Rn-V^}yBEP`#us8q%~3)zjgi9V
z^;H<HL{+#8rdD2jot`@}dvTOuRzDkc_-ly6ZasDetiO>tVp0H(O&t=sqXqtupOZh<
zFq28-CHyENn&Jjse0J+bLdiZ^hJ5?*MLnbE6>hobCB$14@`6KkIw@PAhJvckchkz~
zt;jL$3v>TxIqOcGAqFM`oCrjjXUbeMR214u7qY=muly-ug^`9NH{@9Uf$6ksZ5GvU
z$#pZ=e2&7mdCgm=*$lmnqogi1zU?{w#>pJI9(768+pUUrO9grPT$P@27B6HTWR3v}
z@(W+oHWm&`1Ea8U$ou6DTl*rDA47z<+12Wb?BvmtNL4uz7?hI{*;OexbqR3VbI-tx
zl@aK-4ycCY!*BFo0(@FeXFQUU<rYjH?8z=asZE>P=5Gjl63dsQ0XvK9e2Hm)X(Npr
ziN?b_WBm}m)g#P94rP}0!!&zJ14kXo*D*49p$-G7ZYI?w$;ko|=6OAdEQyz||9Av7
z!y1XYIHwqOx;dmGhP^eN;Buy{dM@<*wQCo7%6JP34BVR2j;gPJD={uCm7%O$l{oDF
zM)m~xNbX3Ib0AGtwnEC!N3MvlgM~z(7_#o;B5N$v8pusX9x%$JoWg)BZu8NWU+_UW
zdtIO!CbFhzA=-?MP2_rFBDahytfyw!jx|h?lWfIKeq)aOcz75~Ce5X*dVx%i420Gg
zHJ%wCWHUQIU=S9oMI9^?p<mr-5NAc@TPFdt(`NIpa7mf<D-CGxmPyIVO0qN8@jm$~
zH5zYlK5^$@qT>>9<9JVDnuBJ(v3NYJvkuS3Fpv@^cI?@)SJTlXc5+T8es?YTHQXq?
zLUeR#u5aZ>6wp>|@SV+j=lR1E?hLY(LmO-S=o%TEo~W=#)-NyeA?X9PBCyuG$1kx5
zJSS)w<oURIVl5eo6g;Q~_GMlIY^K&A+<U4fYu2~AOln%|CrG~d+9&$3fkODN1>{C=
zna_OVB^U1V^8b!quq<G&2-Hq|t**8m%<TG?%~yRYZRxjpx{ZsW_QG@WslcxJ^JN?m
zZs7}E9Sy5G7QihfRL)w#Ej~q9Y6)*EwI3734o6p_yV3(6V5NZ8zR^#tZ{a${_g;ug
z$_O-t#&0Y*K`c(-Kklr!bp=xnAy>JO-D5ksJpAd?`aNWHyLakKg>aR6tW9XgWSI4c
z%Bjh72?)a6?7Tv739Bs^pOl%__=wy^@#fp5*mPYo*qgNR?)j;Y0N^O9<e;)37#$?e
zHHK~Nd!nml7X2)9?~DCJY>%va`Yd;J9AI=R5L)c)41Us9S8eotLBBNb+YDEEU;xfB
zzG7qhCM^`){52=^4}~M;pX;@O2IZUFlwWdB)`bf^sCb#Ld)mmkuT=p9@3p)|G~XV+
z!_PuWmRR9;jMq!~xjhP}NSo@BLLfD~1@V`Fy(hSNqcN%4=B?lQM%s3ECx#RdE7*X#
z^1({Y{pyyRDq6FPq#JBtO}NQ|vpRQm__wKz2lFX&M#;g{hs&`L`lCw#tMl?^=G}=j
z;CWWOE8na{Aj<Y(v1pz`;`a+klmlm3+pSlx_XB}zkLczWY@&QbAKvAM$-5RyX7A9I
zYx@-i#esDB&qx+7#J1X4iPY2LM?GnC$U8&XH-5#OKG_dK3avo9f;1oETV5R&8oG$;
z^=uT|#asgXG=BfKF=ZP`J~4u5^$dcrqP4ZE?&zJ@%S;@;;rG&RT^svy+N<n3bUch|
z*nzMU#c-DZtYWkjI>?4Yx$3B&WrWF-f8-e{2~_Qo1<pY1L?7qxa#LjyJM!5(EzRm;
zT}ZIy&PggkKq0Xl(Nyc-vv`qh*B|zy5YpIwdhd)j?o2DDG`h&E93^2Sng(Gn3i!OR
zDMd74$treH$xgnWA>fx`Nr+Vj9d0B9J6E`MBP9xSOy>!A!598V!7=gBC~?#zP%wA#
z{*uNZMXyYs|LMU_*M|-F8xACVTX5yQRPEKXyjm#3&3h7`&FRL7uRdEYezmmHFBRck
z(^hgh|9zrJ2rb^kkYK*x1(O2G2Gshpp1(z`W9yO*>2FSB)CqRDbqPE3TC@~6Pb?ID
z7Mg2-iVwVv_fG5#qMv^h*DLm#^&OQ!eP235;G5#s7CQbiPZ2YMjbMo=!OiKRqVvw}
zyC)WVm{M$lSU0;sVM11``u@OhOPS{&ZF0gyejk_Ek8*k6s`i6%ucsv4UsQdM&j-b%
zI{(Uy2ig`FE#-LCd|(q@_6v&HMZUDn@bKFvsrp)6`^S2;yEq#xzUHW3)r?lfKcV1?
zG>D&GciGWad^u{-gNMiN5~T_j;MV=6oXBkMjd67PiaT5gHJQgK&^W!<a)&HEhHE@h
zbtWsZr<@CnnEc~mRcBr)tK?k|*Br(01nOf5;j7RzNBapNE{Sw5!Dw|d^F<c@`@+gj
z7=o|D^RUki^Z^jbV`>`vk)~HsJUC`W9;J<EZJf#}LOK2M2aiw6e&bS+j=(y1IV?{e
zw?+G;J(Vo^Y;f|q+`&}4-@>h1Do$aOQ+&;Z?o)n<I{KH5#Ec{EB#Wm$BRsXeW6OqQ
z70kY1-5j0M#!}_zmsnj~YIGml;FHS-JT9xmtA|Yd6|;bTVs*;7#S~bqt!8!@3cD==
zbW0#IrHcOiE0147uNKy2b|On-?x!pB9LV$pQQ;1IPyFYGIOP~bb%@<QN@S~zdFU7N
zg##wSK_0$l0(Jp?mjEtREhOLkyj8g_TRRUdcL&aKtcKJ*S13?w;O!FO+g~GknsF;(
z4l9c`gxt4m+)AxNbja2la|K&<2PI+9`bVTuMa*kt8M_dAqJ!(_g(XC0IpeaK!F!e&
z&0l9upVU{YTa0jv``$QJ2p_`7a1Cg+K-C!_vXiJklQFklRh*iK8k>-Jaf^8c>@QZH
zO;tx%2q+C{edvjaXa2KrmbC)wGRAT3EG;j01>YX}mJBdg2K%%Y2QzQ^9FQ%AyotQK
zj-je041elmq<P=I7H(vKcRbrnL%tvJke=ENa+omHIdFOU!RFQTv*zwg0LKdyn{Ou_
z^nN<D4bc$l{?&F9YPT=82aZ_2aeFi__r}+0uOBy=Xbq^8o%1-u;qhnD@#|BLi>kxC
zkR|!wmw@WFJrbd=;Fz>J_Q;XjYKB_%>36Wtp4~Ow$RA*<Y@v5hGJTx(jW8mFo%4-X
zMCZ2>KA#mF!{#}Srz}LK&B99uWuw4))$kz9C!%y!fN<EfIi#s@W<#nckue9hT3K<Y
zQ8>lVPOTdLv8nwM5bH2{9@Qp^lCY}FTN`$KxNes?f{}_f&QU5_xOml->7J`ln0q3%
z?caL|NV4DQv)H{2J2*lc|4Q{R@MX^BPjWK!C!KC?V+gz-HZpD}_gmm4MF|K`@cpFj
zIJ#8ri_pt_q6LYW8@a%z$*)-a{C03h!XNtj_*Yx%{Q1;IQ-mINYtm}Mz)MtOqNG2m
zlMv;AygPcx*cEOa9TtfE*}?Udi5*0%fDg5bj@diu;u+Z|RC*sb))u}V6kAt(?!khI
zN&uIC{|Vt4K|YfDW`c^wY*)Abq)}1F^DJhc%_uE#G+?sH&kGNbX=50Ha??Ey%x3$R
zH8Y$kS&WyTaU-#1QEbGFY9g&<%5ard-UZQUo&g4aG`RWb4f#L{Mr`D0{)dClfU5rt
z;*$%_s_Wqbixh9?8BE@<V5nrU10bxdRP`)JfYQ8RsOn9mf1G=U=;9YHztZG=tK-!K
zMT5U%wQ2UM`9DnzA3a=cv@+SVs{=WnIKF#T(Wg3H`M&G{ZCwAXw=%2RPG-2fs;5Pr
zbpJO>tK6w~rA1{bmf0(lO`E6@RNwLq%T>3I1omyemigw}EED!W>&7C5wxy9v4OQW7
zE9p(>z7ufl?E&Q|ku+ntW_+;TdG{eaI3lZ5Th{3?%2mS_kLKm7G{HPlm^Qlvv=qYD
zAMMd#WA_5#rTWjF((aPNw&o>&Z5&o*U{r{A>f5IF=X65fcppCA+YDH3*`13<mv{x;
zq;!P*Ak5bnK$I#?jgzt{!naINi?T8+tE~k+HsoQ`>t<_Kv`OPFCx=}KH?c5T_0-da
z%|Xe5yh)|!gQ?DZZ<-pD9e<nG3qJI%?6sz2#2fQ}pPdrE{ieh;>y;AS!{K7>Q$P7G
zq{W>+UN58E<NaiUA9Z~E^uq$IQgK4mSYDAotHng&kvc@V{d-?WNh4O_(}Q0q4Wjwy
z<#{q!bgyxCm_H0&?#qAAJPf}pmfDCrmHHwlJi6G6+!9&kHL0{mX}lhgVfDGl?WrQ@
z&MirVQ*gSEf1DsfFAB=FlkLmwLC0n81cmi&>#%Jt4WiOtlL_D84jQ{#O`q8U`nxjc
zYPa}zJy*W&TI<FA(U~9H9d2zM3QtYPHEccB#Fk{Fr*3;%o8}bOr=pwvr-zGk`5ab)
zWNavUBp4>0$BjjbBt{J9J6`lFNODy7_=7{$Z_59cD>gni*%NFZmUXxb*N4^l-qgM}
zrDFw<>+$N$`RV=)j~SsWSZcEkrlg|^)bvVv7iX%)iGoaHnyVxTq*y*|BI(_6!GX%e
z%%OO@@32xw%n%*Do-R1V(d2J+Tz3CYPL%vN-;J&ZRS5gCaCa7;^YBTS>Ej#v-qdYH
zNMVuBIx8iLdM<_j;Jh}Fs><2J=3A-`+WYCNE%0trlyUss_TeDxxfW3-#e6)=cw+V2
z_g^`8x5ZZTKo)ZRk+A*b^41P6B(|F1r1#n9`^90joI_j@>oGKMs8%=L-FVinQq*#Q
zT2H305~&i9>pzoXkBVgT6e~7R&Bqmln*1<%FT^=PY=8XpO)Aw-_Gkg%0kd2At#n|B
zSZ)*UNJl?X69t+gX$=vItMG}*usWOpp;hW858RFScSk%%4UEP0Nb_92*Vj@LX^nT{
z&y2UXBVbU7T<eJM<Hz@Ly+D7HA=bbj(%OFIhc9WK0^`1q?~lRXSjvwXSf@YZA9r#q
zoD<hD3$cucO<n@7p*V(C&0R^0CBAYSLU9{Or?6-u8zDFt&(K{r{k?n1;)@fHgK<FS
z1v^eLd@qo%pbJS&{<Of8ejO7|rJ1$l^y~D*iB)Snd@Ad^r9@G!J2X;fQuHs#3B*mJ
zI$44a*fKXG4h5Mt7PpD|7UjpsJvD7WKS<A1W>!(^67#x+F(UjqS6CPo7^%X(V=9km
zsblSOYBahK+a7wI$j>c{WH4+_L9q4j412%|*zrG;)x_y#>!?d=i$@23vpB!9Fj<)X
z^H>et8MK+B<8YRU8+NZ3HA+cJ^uLfGpjW{3zT3mS6(t|CgXYt<2cT<97-m8}?jxMS
zdO$Kq&c^&qWzTIW^EB><n@~HdFV$V&r7NwhMs-T^9XPd3C2P;F1k|@oNS=6<lZ?1e
z%fLG#V=|iHH7<A3pGc&Iy%%TB)7&k{nm~Hi1iUSIsX8V0`3u|~kPQ<Px~gJ0v$van
zSw2+7wYAmWq<Q4hurjx4t2&Z`I#k)fbjZ`Vq*q?sStZX5ue0vE$Q<I954!gR)bw_5
z@eR2blw9bm>h@`?e2tpwj)r9;_d@2;Xc(B@yY03Anfd048^0bQZ8QAWeYN>FL6IK8
z*VWlKF#-)?JKYv-nQ<P^d7fWCt1rRAQGwEUP*p^2Ozj@aAcq+Lia?X==;R;yZCjkA
z<bgU=c65VPX?!XdkF&&@CgDoD-u|%olzFtacT->5x|IU$Zvpb`(>q9H@NGio7u7Rq
ztG}39L}X^^Fw5+~p_JO9{lo&sU#2fS{cH01#`6fqjJoTR8l^i%?`?(E=tUNL_>OLe
z6nT=Q2&u;Pw1v*DAu8V)@ker$O@i3W4(X8hkY6-Rm8&3lhEAlbwV44u@#=%&3BQki
zCsalqvz7LHO4M3jVr0;_RKrH72gP@hq^edWgG^8m6lzP8MTSoXKZQ^&G)s@K83u%C
zp&~I!E{k@*P3Cpb1Kf|x)!sdvb(CM8gD5#&0>XR=h|qa^?I5c1#<rCle?BI|#lG*E
z7t$(P#gNGg>CKa@>YwpXc0VG-d%td@97~8dnsqdXYZNyu+2OlXMRPhu&!f4~XG&g{
z^1ZwuQ3Ol)Uvp|ykA%LBok@i`-YpVhA7D+jCNn20dUCC`stZijn-&wL%1{*GWf4g7
zg^|`|^y~dH%DZ&VAKgbmBKz*_@Q9WOfFQ+q(*p@{t@sLLS)>j5omMv_=bMKXNm{Hi
PPmL$vt##z5T>khE?!CM^

diff --git a/src/server/api/index.js b/src/server/api/index.js
index 7ac42c6..c467940 100644
--- a/src/server/api/index.js
+++ b/src/server/api/index.js
@@ -9,9 +9,6 @@ apiRouter
   .all('ping', '/ping', parseBody, (ctx) => {
     ctx.response.body = { pong: ctx.request.body }
   })
-  .get('bar', '/bar', (ctx) => {
-    ctx.response.body = { bar: [ 'bruce', 'willis', 'wet', 'himself' ] }
-  })
   .all('not-found', '*', (ctx) => {
     ctx.response.status = 404
     ctx.response.body = { error: STATUS_CODES[status] }
diff --git a/src/server/middleware/flash-messages.js b/src/server/middleware/flash-messages.js
deleted file mode 100644
index 341df51..0000000
--- a/src/server/middleware/flash-messages.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import * as flashSelectors from 'app/modules/flash/flash.selectors'
-import { addMessage } from 'app/modules/flash/flash.actions'
-
-export default async function flashMessages(ctx, next) {
-  ctx.flash.map(({ message, type }) =>
-    ctx.store.dispatch(addMessage(message, type))
-  )
-  await next()
-  if (ctx.response.status === 302) {
-    transferFlashMessages(ctx)
-  }
-}
-
-function transferFlashMessages(ctx) {
-  const nextFlashMessage = flashSelectors.getNextMessage(
-    ctx.store.getState()
-  )
-  if (nextFlashMessage) {
-    ctx.addFlash(nextFlashMessage.message, nextFlashMessage.type)
-  }
-}
diff --git a/src/server/router.js b/src/server/router.js
index f196d59..83b117b 100644
--- a/src/server/router.js
+++ b/src/server/router.js
@@ -1,7 +1,6 @@
 import router from 'koa-router'
 import compose from 'koa-compose'
 import setStore from 'server/middleware/set-store'
-import flashMessages from 'server/middleware/flash-messages'
 import renderApp from 'server/middleware/render-app'
 import apiRouter from 'server/api'
 
@@ -16,8 +15,6 @@ export function setRoutes(assets) {
   const renderReactApp = compose([
     /* set a store for server side state rendering */
     setStore,
-    /* wire up flashMessages from redirect to server store */
-    flashMessages,
     /* give assets from bundle, set response body from react app */
     renderApp(assets),
   ])
diff --git a/test/integration/client/app.test.js b/test/integration/client/app.test.js
index 75d944d..3ba4f3a 100644
--- a/test/integration/client/app.test.js
+++ b/test/integration/client/app.test.js
@@ -10,7 +10,7 @@ describe(`Client Render`, function () {
 
   it(`sets the page title`, done => {
     defer(() => {
-      expect(document.title).to.eql('Breko Hub')
+      expect(document.title).to.eql('My App')
       done()
     })
   })
@@ -20,7 +20,7 @@ describe(`Client Render`, function () {
       const metaCharset = document.querySelector('meta[charset]')
       expect(metaCharset.getAttribute('charset')).to.eql('utf-8')
       const metaDesc = document.querySelector('meta[name=description]')
-      expect(metaDesc.getAttribute('content')).to.contain('Breko Hub')
+      expect(metaDesc.getAttribute('content')).to.contain('')
     })
   })
 
@@ -29,7 +29,5 @@ describe(`Client Render`, function () {
     expect(this.wrapper.find('.HomeRoute')).to.be.present()
     expect(this.wrapper.find('.OopsRoute')).not.to.be.present()
     expect(this.wrapper.find('.NotFoundRoute')).not.to.be.present()
-    expect(this.wrapper.find('.BarRoute')).not.to.be.present()
-    expect(this.wrapper.find('.PrivateRoute')).not.to.be.present()
   })
 })
diff --git a/test/integration/client/bar.route.test.js b/test/integration/client/bar.route.test.js
deleted file mode 100644
index 9398cb4..0000000
--- a/test/integration/client/bar.route.test.js
+++ /dev/null
@@ -1,40 +0,0 @@
-import fetchMock from 'fetch-mock'
-
-describe(`Bar Route`, function () {
-  const barResponse = [ 'some', 'test', 'response', 'data' ]
-
-  beforeEach((done) => {
-    fetchMock.get('/api/bar', {
-      status: 200,
-      body: { bar: barResponse },
-      headers:  {
-        'Content-Type': 'application/json',
-        'Content-Length': '1',
-      },
-    })
-    helpers.prepare(this, '/bar', done)
-  })
-
-  afterEach(() => {
-    helpers.cleanup(this)
-  })
-
-  it(`updates the page title`, done => {
-    defer(() => {
-      expect(document.title).to.eql('Bar | Breko Hub')
-      done()
-    })
-  })
-
-  it(`renders the .BarRoute`, () => {
-    expect(this.wrapper.find('.BarRoute')).to.be.present()
-  })
-
-  it(`renders the response from /api/bar`, () => {
-    barResponse.forEach(item => {
-      const barItem = this.wrapper.find({ children: item })
-      expect(barItem).to.be.present()
-      expect(barItem.type()).to.eql('p')
-    })
-  })
-})
diff --git a/test/integration/client/private.route.test.js b/test/integration/client/private.route.test.js
deleted file mode 100644
index 4a3f367..0000000
--- a/test/integration/client/private.route.test.js
+++ /dev/null
@@ -1,61 +0,0 @@
-
-describe(`Private Route`, function () {
-  const privateMsg = {
-    message: 'You may not view the private route!!',
-  }
-
-  before(() => {
-    this.clock = sinon.useFakeTimers()
-  })
-
-  beforeEach((done) => {
-    helpers.prepare(this, '/private', done)
-  })
-
-  afterEach(() => {
-    helpers.cleanup(this)
-    this.clock.tick(4000)
-  })
-
-  after(() => {
-    this.clock.restore()
-  })
-
-  it(`redirects to /`, () => {
-    expect(this.wrapper.find('.HomeRoute')).to.be.present()
-  })
-
-  it(`adds a flash message`, () => {
-    const flashMsgs = this.wrapper.find('.Msg')
-    expect(flashMsgs).to.be.present()
-    expect(flashMsgs.text()).to.contain(privateMsg.message)
-  })
-
-  it(`removes flash messages when clicked`, done => {
-    expect(
-      this.wrapper.find('.Msg')
-    ).to.have.length(1)
-    this.wrapper.find('.Msg__close').simulate('click')
-    defer(() => {
-      this.wrapper.update()
-      expect(
-        this.wrapper.find('.Msg')
-      ).to.have.length(0)
-      done()
-    })
-  })
-
-  it(`removes flash messages after 4 seconds`, (done) => {
-    expect(
-      this.wrapper.find('.Msg')
-    ).to.be.present()
-    this.clock.tick(4000)
-    defer(() => {
-      this.wrapper.update()
-      expect(
-        this.wrapper.find('.Msg')
-      ).to.have.length(0)
-      done()
-    })
-  })
-})
diff --git a/test/integration/server/server-api.test.js b/test/integration/server/server-api.test.js
index 25b3659..fb9b84d 100644
--- a/test/integration/server/server-api.test.js
+++ b/test/integration/server/server-api.test.js
@@ -19,11 +19,4 @@ describe(`Server API`, function () {
       .expect('content-type', /application\/json/)
       .expect({ pong: body })
   )
-
-  it(`responds to the bar route`, () =>
-    supertest(app.callback())
-      .get('/api/bar')
-      .expect('content-type', /application\/json/)
-      .expect({ bar: [ 'bruce', 'willis', 'wet', 'himself' ] })
-  )
 })
-- 
2.14.2

